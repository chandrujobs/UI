import streamlit as st
from dotenv import load_dotenv
import os
import requests
from openai import OpenAI

# Load environment variables
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
base_url = os.getenv("OPENAI_BASE_URL")
model_id = os.getenv("MODEL_ID")

# Streamlit page settings
st.set_page_config(page_title="Codepilot API Test", layout="wide")
st.title("🚀 Codepilot API Test")
st.caption("Test your Codepilot API connection and UI generation capabilities.")

# Session state defaults
if "multi_screen_code" not in st.session_state:
    st.session_state.multi_screen_code = []
if "reset_triggered" not in st.session_state:
    st.session_state.reset_triggered = False

# Prompt templates
prompt_library = {
    "🔐 Login Form": "A modern login screen with logo, email/password fields, and login button. Centered on a soft background.",
    "📦 Product Cards": "Three product cards in a row, each with image, name, price, and Add to Cart button.",
    "📊 Dashboard Layout": "A two-column dashboard with sidebar navigation and main content area containing charts or widgets.",
    "📝 Registration Page": "A user registration form with full name, email, password, and confirm password fields. Minimal styling.",
    "📧 Newsletter Signup": "Centered signup form with a heading, email input, and subscribe button on a soft gradient background."
}

# Sidebar controls
with st.sidebar:
    st.header("🔧 API Settings")
    api_url = st.text_input("Flask API URL", value="http://localhost:5000")
    
    st.header("📚 Prompt Library")
    selected_prompt = st.selectbox("Choose a sample prompt", ["🔽 Select a prompt..."] + list(prompt_library.keys()))
    
    device_type = st.radio("Device Type", ["desktop", "tablet", "mobile"], horizontal=True)
    
    test_connection = st.button("🔄 Test API Connection")
    
    if st.button("🔄 Reset All"):
        st.session_state.multi_screen_code = []
        st.session_state.reset_triggered = True
        st.rerun()

# Test API connection
if test_connection:
    with st.spinner("Testing API connection..."):
        try:
            response = requests.get(f"{api_url}/test-api")
            if response.status_code == 200:
                st.sidebar.success("✅ API connection successful!")
                st.sidebar.json(response.json())
            else:
                st.sidebar.error(f"❌ API connection failed with status code: {response.status_code}")
                st.sidebar.text(response.text)
        except Exception as e:
            st.sidebar.error(f"❌ Error connecting to API: {str(e)}")

# Handle prompt input
if st.session_state.reset_triggered:
    prompt_value = ""
    st.session_state.reset_triggered = False
else:
    prompt_value = prompt_library.get(selected_prompt, "") if selected_prompt != "🔽 Select a prompt..." else ""

# Prompt input
st.subheader("📝 Describe the UI you want to test:")
prompt_input = st.text_area("Prompt", value=prompt_value, key="prompt_input", height=150)

# Buttons
col1, col2 = st.columns([1, 1])
with col1:
    generate_btn = st.button("✨ Test UI Generation", use_container_width=True)
with col2:
    clear_btn = st.button("❌ Clear Output", use_container_width=True)

# Generate UI
if generate_btn and prompt_input.strip():
    with st.spinner("Generating UI..."):
        try:
            # Prepare request data
            request_data = {
                "prompt": prompt_input.strip(),
                "device": device_type
            }
            
            # Log request
            st.write("### API Request")
            st.json(request_data)
            
            # Make API call
            response = requests.post(f"{api_url}/generate", json=request_data)
            
            if response.status_code == 200:
                result = response.json()
                
                # Store HTML code
                html_code = result.get("html", "")
                react_code = result.get("react", "// React code not available")
                vue_code = result.get("vue", "// Vue code not available")
                angular_code = result.get("angular", "// Angular code not available")
                
                # Add to session state
                st.session_state.multi_screen_code = [
                    {"html": html_code, "react": react_code, "vue": vue_code, "angular": angular_code}
                ]
                
                st.success("✅ UI generated successfully!")
            else:
                st.error(f"❌ Error: API returned status code {response.status_code}")
                st.text(response.text)
        except Exception as e:
            st.error(f"❌ Error: {e}")

# Clear output
if clear_btn:
    st.session_state.multi_screen_code = []

# Render output
if st.session_state.multi_screen_code:
    # Create tabs for different parts of the response
    tabs = st.tabs(["🖼 UI Preview", "🔤 HTML", "⚛️ React", "🔄 Vue", "🅰️ Angular"])
    
    with tabs[0]:  # UI Preview
        html_code = st.session_state.multi_screen_code[0]["html"]
        st.components.v1.html(html_code, height=700, scrolling=True)
        st.download_button(
            "💾 Download HTML",
            data=html_code,
            file_name="ui_design.html",
            mime="text/html"
        )
    
    with tabs[1]:  # HTML
        st.code(st.session_state.multi_screen_code[0]["html"], language="html")
    
    with tabs[2]:  # React
        st.code(st.session_state.multi_screen_code[0]["react"], language="jsx")
    
    with tabs[3]:  # Vue
        st.code(st.session_state.multi_screen_code[0]["vue"], language="javascript")
    
    with tabs[4]:  # Angular
        st.code(st.session_state.multi_screen_code[0]["angular"], language="typescript")
