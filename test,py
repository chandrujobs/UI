import streamlit as st
import requests
import json
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
base_url = os.getenv("OPENAI_BASE_URL")
model_id = os.getenv("MODEL_ID")

# Set page config
st.set_page_config(page_title="Codepilot API Test", layout="wide")
st.title("ðŸš€ Codepilot API Test")
st.write("This app tests your Codepilot API before implementing the full UI.")

# API URL (change if your Flask app is running on a different port/host)
API_URL = st.text_input("API URL", value="http://localhost:5000")

# Test API connectivity
col1, col2 = st.columns(2)
with col1:
    if st.button("Test API Connection"):
        try:
            response = requests.get(f"{API_URL}/test-api")
            if response.status_code == 200:
                st.success(f"API connection successful! Response: {response.json()}")
            else:
                st.error(f"API connection failed with status code: {response.status_code}")
                st.error(f"Response: {response.text}")
        except Exception as e:
            st.error(f"Error connecting to API: {str(e)}")

with col2:
    if st.button("Get Sample Prompts"):
        try:
            response = requests.get(f"{API_URL}/sample-prompts")
            if response.status_code == 200:
                prompts = response.json()
                st.success(f"Successfully retrieved {len(prompts)} sample prompts!")
                st.json(prompts)
            else:
                st.error(f"Failed to get sample prompts. Status code: {response.status_code}")
                st.error(f"Response: {response.text}")
        except Exception as e:
            st.error(f"Error getting sample prompts: {str(e)}")

# Test UI generation
st.subheader("Test UI Generation")
prompt = st.text_area("Enter a prompt", value="A simple login form with username and password fields")
device = st.selectbox("Device", ["desktop", "tablet", "mobile"])

if st.button("Generate UI"):
    try:
        with st.spinner("Generating UI..."):
            payload = {
                "prompt": prompt,
                "device": device
            }
            
            # Log request details
            st.write("### Request Details")
            st.code(json.dumps(payload, indent=2), language="json")
            
            # Make the API call
            response = requests.post(f"{API_URL}/generate", json=payload)
            
            # Log response status
            st.write(f"Response Status Code: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                
                # Show HTML preview
                st.write("### HTML Preview")
                html_content = data.get("html", "")
                if html_content:
                    st.components.v1.html(html_content, height=500, scrolling=True)
                else:
                    st.warning("No HTML content received")
                
                # Show framework code tabs
                tab1, tab2, tab3, tab4 = st.tabs(["HTML", "React", "Vue", "Angular"])
                
                with tab1:
                    st.code(html_content, language="html")
                    if st.button("Download HTML", key="download_html"):
                        st.download_button(
                            label="Download HTML File",
                            data=html_content,
                            file_name="ui_design.html",
                            mime="text/html"
                        )
                
                with tab2:
                    react_code = data.get("react", "// No React code available")
                    st.code(react_code, language="jsx")
                
                with tab3:
                    vue_code = data.get("vue", "// No Vue code available")
                    st.code(vue_code, language="javascript")
                
                with tab4:
                    angular_code = data.get("angular", "// No Angular code available")
                    st.code(angular_code, language="typescript")
            else:
                st.error(f"Generation failed with status code: {response.status_code}")
                try:
                    error_data = response.json()
                    st.error(f"Error: {error_data.get('error', 'Unknown error')}")
                except:
                    st.error(f"Response: {response.text}")
    except Exception as e:
        st.error(f"Error during generation: {str(e)}")

# Environment variables (redacted for security)
st.subheader("Current Environment Variables")
st.write(f"API URL: {base_url}")
st.write(f"Model ID: {model_id}")
st.write(f"API Key: {'âœ“ Set' if api_key else 'âœ— Not Set'}")
