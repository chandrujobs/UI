import requests
import json
import os
from dotenv import load_dotenv
import time

# Load environment variables (if needed)
load_dotenv()

# API endpoint (adjust if your server runs on a different port)
BASE_URL = "http://localhost:5000"

def test_api_connectivity():
    """Test if the API is running and responding"""
    print("\n=== Testing API Connectivity ===")
    try:
        response = requests.get(f"{BASE_URL}/test-api")
        if response.status_code == 200:
            print("‚úÖ API is running and responding successfully!")
            print(f"Response: {response.json()}")
            return True
        else:
            print(f"‚ùå API responded with status code: {response.status_code}")
            print(f"Response: {response.json()}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Could not connect to the API. Make sure the server is running.")
        return False

def test_prompt_library():
    """Test retrieving the prompt library"""
    print("\n=== Testing Prompt Library Endpoint ===")
    try:
        response = requests.get(f"{BASE_URL}/prompt-library")
        if response.status_code == 200:
            prompts = response.json()
            print(f"‚úÖ Received {len(prompts)} prompts from the library")
            for key, value in prompts.items():
                print(f"  - {key}: {value[:30]}...")
            return prompts
        else:
            print(f"‚ùå Failed to get prompt library. Status: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def test_generate_with_text():
    """Test generating UI from a text prompt"""
    print("\n=== Testing Generation with Text Prompt ===")
    
    data = {
        "prompt": "A simple login form with username, password, and a login button",
        "device": "desktop"
    }
    
    try:
        start_time = time.time()
        response = requests.post(f"{BASE_URL}/generate", json=data)
        end_time = time.time()
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ UI generated successfully in {end_time - start_time:.2f} seconds!")
            
            # Check if all expected fields are present
            for field in ["html", "react", "vue", "angular"]:
                if field in result:
                    content = result[field]
                    print(f"  - {field.upper()}: {len(content)} characters")
                else:
                    print(f"  - {field.upper()}: Missing")
            
            # Save the HTML to a file for testing
            with open("test_output.html", "w") as f:
                f.write(result["html"])
            print("  - Saved HTML output to test_output.html")
            
            return result
        else:
            print(f"‚ùå Generation failed with status: {response.status_code}")
            print(f"Response: {response.json()}")
            return None
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None

def test_generate_with_file(file_path):
    """Test generating UI from a file"""
    print(f"\n=== Testing Generation with File: {file_path} ===")
    
    if not os.path.exists(file_path):
        print(f"‚ùå File not found: {file_path}")
        return None
    
    # Prepare multipart form data
    files = {
        'file': (os.path.basename(file_path), open(file_path, 'rb'), 
                'application/pdf' if file_path.endswith('.pdf') else 'image/png')
    }
    
    data = {
        'prompt': '', # Empty prompt, using file only
        'device': 'desktop',
        'max_pages': '3',
        'use_batching': 'true'
    }
    
    try:
        start_time = time.time()
        response = requests.post(f"{BASE_URL}/generate", files=files, data=data)
        end_time = time.time()
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ UI generated from file successfully in {end_time - start_time:.2f} seconds!")
            
            # Check multi-screen results
            if "multi_screen_html" in result:
                screens = result["multi_screen_html"]
                print(f"  - Generated {len(screens)} screens")
                
                # Save each screen to a file
                for i, screen_html in enumerate(screens):
                    filename = f"test_screen_{i+1}.html"
                    with open(filename, "w") as f:
                        f.write(screen_html)
                    print(f"  - Saved screen {i+1} to {filename}")
            
            return result
        else:
            print(f"‚ùå File generation failed with status: {response.status_code}")
            print(f"Response: {response.json() if response.content else 'No content'}")
            return None
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None
    finally:
        # Close the file
        if 'files' in locals() and 'file' in files:
            files['file'][1].close()

def main():
    """Run all tests"""
    print("üß™ Starting API tests for Codepilot AI")
    
    # Test 1: API Connectivity
    if not test_api_connectivity():
        print("‚ùå API connectivity test failed. Stopping further tests.")
        return
    
    # Test 2: Prompt Library
    prompts = test_prompt_library()
    
    # Test 3: Generate with Text
    result = test_generate_with_text()
    
    # Test 4: Generate with File (if available)
    # Create a sample file or specify path to an existing one
    sample_file_path = "sample.pdf"  # Replace with your actual file path
    if os.path.exists(sample_file_path):
        file_result = test_generate_with_file(sample_file_path)
    else:
        print(f"\n‚ö†Ô∏è Skipping file test as {sample_file_path} doesn't exist")
        print("   To test file upload, place a sample PDF or image in the project directory")
    
    print("\n‚ú® API testing completed")

if __name__ == "__main__":
    main()
